fn main() {
    // Read command line arguments
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <path_to_nwk_file>", args[0]);
        return;
    }

    // Read the .nwk file content
    let content = fs::read_to_string(&args[1]).expect("Failed to read the file");
    
    // Parse the content to get the Node representation of the tree
    let pairs = NewickParser::parse(Rule::newick, &content).unwrap_or_else(|e| panic!("{}", e));
    for pair in pairs {
        let mut vec_trees = newick_to_tree(pair);
        let example_tree = vec_trees.pop().unwrap();

        // Convert Node representation to FlatNode representation
        let mut flat_tree = Vec::new();
        node_to_flat(&example_tree, &mut flat_tree, None);

        // Convert FlatNode representation back to Node representation
        let reconstructed_tree = flat_to_node(&flat_tree, 0, None).unwrap();

        // Convert Node representation back to Newick format and print
        let reconstructed_newick = node_to_newick(&reconstructed_tree) + ";";
        println!("Reconstructed Newick: {}", reconstructed_newick);
    }
}

fn main() {
    // Read command line arguments
    let args: Vec<String> = env::args().collect();
    if args.len() != 2 {
        eprintln!("Usage: {} <path_to_nwk_file>", args[0]);
        return;
    }

    // Read the .nwk file content
    let content = fs::read_to_string(&args[1]).expect("Failed to read the file");
    
    // Parse the content to get the Node representation of the tree
    let pairs = NewickParser::parse(Rule::newick, &content).unwrap_or_else(|e| panic!("{}", e));
    for pair in pairs {
        let mut vec_trees = newick_to_tree(pair);
        let example_tree = vec_trees.pop().unwrap();

        // Measure the conversion time
        let start = Instant::now();
        let reconstructed_newick = node_to_newick(&example_tree) + ";";
        let duration = start.elapsed();

        println!("Reconstructed Newick: {}", reconstructed_newick);
        println!("Time taken: {} seconds and {} nanoseconds", duration.as_seconds_f64(), duration.subsec_nanoseconds());
    }
}